// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: k36LaA3jKH2iM5TPziRS5u
// Component: 7nU-ZRx9lp
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: EJWJhtYFDSVc/component
import ContactForm from "../../ContactForm"; // plasmic-import: hTB0LhmAXD/component
import FooterSection from "../../FooterSection"; // plasmic-import: gmJAhrNU82Dm/component
import { useScreenVariants as useScreenVariantskOpWzg9HWoz5 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: kOpWzg9HWoz5/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_landing_page_starter.module.css"; // plasmic-import: k36LaA3jKH2iM5TPziRS5u/projectcss
import * as sty from "./PlasmicContact.module.css"; // plasmic-import: 7nU-ZRx9lp/css
import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: tbKcG59mk9ZX/icon

export const PlasmicContact__VariantProps = new Array();

export const PlasmicContact__ArgProps = new Array();

function PlasmicContact__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskOpWzg9HWoz5()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___4Tia6)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__q24Z7)}>
              <div className={classNames(projectcss.all, sty.freeBox__um37T)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pz8Pr)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"copy"}
                    data-plasmic-override={overrides.copy}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.copy)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__oy7Wc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6BpCu
                        )}
                      >
                        {"CONTACT US"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zrqp
                        )}
                      >
                        {"Let's Connect"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pQjHz
                        )}
                      >
                        {
                          "Consectetur a adipiscing sagittis sed proin libero himenaeos ornare adipiscing suscipit leo vestibulum facilisi consequat nisi nisi adipiscing habitant facilisis suspendisse hac integer eget quam facilisis sem placerat fames."
                        }
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__csFnd)}
                    >
                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(projectcss.a, sty.link__t009M)}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {false ? (
                          <AppleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kBXej
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jOz8U
                          )}
                        >
                          {"Start now ->"}
                        </div>

                        {false ? (
                          <AppleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__uZlQ
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>

                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(projectcss.a, sty.link__xta2K)}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {false ? (
                          <AppleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sHtjr
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uxlpE
                          )}
                        >
                          {"Learn moreâ€¦"}
                        </div>

                        {false ? (
                          <AppleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sUIy
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>

              <div
                data-plasmic-name={"art"}
                data-plasmic-override={overrides.art}
                className={classNames(projectcss.all, sty.art)}
              >
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={
                    "https://images.unsplash.com/photo-1520333789090-1afc82db536a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2851&q=80"
                  }
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__sTIu)}
                />
              </div>
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__k1Mvz)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9ZFw0
                )}
              >
                {"Use The Form To Send Across Your Message"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__nflfq)}>
              <ContactForm
                data-plasmic-name={"contactForm"}
                data-plasmic-override={overrides.contactForm}
                className={classNames("__wab_instance", sty.contactForm)}
              />
            </div>
          </div>

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "copy",
    "art",
    "img",
    "columns",
    "contactForm",
    "footerSection"
  ],

  navbar: ["navbar"],
  copy: ["copy"],
  art: ["art", "img"],
  img: ["img"],
  columns: ["columns", "contactForm"],
  contactForm: ["contactForm"],
  footerSection: ["footerSection"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContact__ArgProps,
      internalVariantPropNames: PlasmicContact__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicContact__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContact";
  } else {
    func.displayName = `PlasmicContact.${nodeName}`;
  }
  return func;
}

export const PlasmicContact = Object.assign(
  // Top-level PlasmicContact renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    copy: makeNodeComponent("copy"),
    art: makeNodeComponent("art"),
    img: makeNodeComponent("img"),
    columns: makeNodeComponent("columns"),
    contactForm: makeNodeComponent("contactForm"),
    footerSection: makeNodeComponent("footerSection"),
    // Metadata about props expected for PlasmicContact
    internalVariantProps: PlasmicContact__VariantProps,
    internalArgProps: PlasmicContact__ArgProps
  }
);

export default PlasmicContact;
/* prettier-ignore-end */
