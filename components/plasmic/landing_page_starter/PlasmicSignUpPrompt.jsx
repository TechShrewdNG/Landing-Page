// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: k36LaA3jKH2iM5TPziRS5u
// Component: jqelQqelLk2-
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: 3xLYAsovFYjh/component
import Button from "../../Button"; // plasmic-import: jXHOU-n1RyP7/component
import Divider from "../../Divider"; // plasmic-import: Ok_KF8Py5Yw_/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_landing_page_starter.module.css"; // plasmic-import: k36LaA3jKH2iM5TPziRS5u/projectcss
import * as sty from "./PlasmicSignUpPrompt.module.css"; // plasmic-import: jqelQqelLk2-/css
import WandIcon from "./icons/PlasmicIcon__Wand"; // plasmic-import: RIFZNPb9l1Tn/icon

export const PlasmicSignUpPrompt__VariantProps = new Array();

export const PlasmicSignUpPrompt__ArgProps = new Array();

function PlasmicSignUpPrompt__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(projectcss.all, sty.freeBox__azXT)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__elrhZ)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___50FUj)}
          >
            <TextInput
              className={classNames("__wab_instance", sty.textInput___5TkO)}
              placeholder={"Full Name"}
            />

            <TextInput
              className={classNames("__wab_instance", sty.textInput__wqcAm)}
              placeholder={"Email"}
            />

            <TextInput
              className={classNames("__wab_instance", sty.textInput__ihCa7)}
              placeholder={"Message"}
            />
          </p.Stack>

          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            color={"indigo"}
            endIcon={
              <WandIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            }
          >
            {"Submit"}
          </Button>
        </p.Stack>

        <Divider
          data-plasmic-name={"divider"}
          data-plasmic-override={overrides.divider}
          className={classNames("__wab_instance", sty.divider)}
        />

        <div className={classNames(projectcss.all, sty.freeBox__nVgzK)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {
              "A cras sagittis odio vestibulum pulvinar a eget hendrerit id vestibulum a leo sociosqu dictumst dictumst natoque magnis parturient."
            }
          </div>
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "button", "svg", "divider", "text"],
  button: ["button", "svg"],
  svg: ["svg"],
  divider: ["divider"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSignUpPrompt__ArgProps,
      internalVariantPropNames: PlasmicSignUpPrompt__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSignUpPrompt__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUpPrompt";
  } else {
    func.displayName = `PlasmicSignUpPrompt.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUpPrompt = Object.assign(
  // Top-level PlasmicSignUpPrompt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    divider: makeNodeComponent("divider"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicSignUpPrompt
    internalVariantProps: PlasmicSignUpPrompt__VariantProps,
    internalArgProps: PlasmicSignUpPrompt__ArgProps
  }
);

export default PlasmicSignUpPrompt;
/* prettier-ignore-end */
