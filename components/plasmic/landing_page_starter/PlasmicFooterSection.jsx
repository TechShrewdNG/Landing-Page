// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: k36LaA3jKH2iM5TPziRS5u
// Component: gmJAhrNU82Dm
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: i0ETAkGaBWuO/component
import Button from "../../Button"; // plasmic-import: jXHOU-n1RyP7/component
import { useScreenVariants as useScreenVariantskOpWzg9HWoz5 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: kOpWzg9HWoz5/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as projectcss from "./plasmic_landing_page_starter.module.css"; // plasmic-import: k36LaA3jKH2iM5TPziRS5u/projectcss
import * as sty from "./PlasmicFooterSection.module.css"; // plasmic-import: gmJAhrNU82Dm/css
import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: u80FOZkOkJ5o/icon
import GithubIcon from "./icons/PlasmicIcon__Github"; // plasmic-import: hugGGdbqJFf3/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin"; // plasmic-import: _Hbykpf2nna3/icon

export const PlasmicFooterSection__VariantProps = new Array();

export const PlasmicFooterSection__ArgProps = new Array();

function PlasmicFooterSection__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskOpWzg9HWoz5()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___1B6Ax)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__zfqQz)}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            _50Opaque={"_50Opaque"}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rtqld)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4CQjP
              )}
            >
              {"Connect with us"}
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___99E6S)}
            >
              <TwitterIcon
                className={classNames(projectcss.all, sty.svg__numSs)}
                role={"img"}
              />

              <GithubIcon
                className={classNames(projectcss.all, sty.svg__cPc1D)}
                role={"img"}
              />

              <LinkedinIcon
                className={classNames(projectcss.all, sty.svg__tqWAi)}
                role={"img"}
              />
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__g0Tjg)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__psXrl
            )}
          >
            {"Product"}
          </div>

          <Button
            className={classNames("__wab_instance", sty.button__giRjM)}
            color={"navLink"}
            flat={"flat"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jJzB2
              )}
            >
              {"Pricing"}
            </div>
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__th4)}
            color={"navLink"}
            flat={"flat"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hlWbt
              )}
            >
              {"Log in"}
            </div>
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__v1QQ)}
            color={"navLink"}
            flat={"flat"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3BsKx
              )}
            >
              {"Integrations"}
            </div>
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__zjRFv)}
            color={"navLink"}
            flat={"flat"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7ZQn
              )}
            >
              {"Insights"}
            </div>
          </Button>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sp8Kb)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__amaby
            )}
          >
            {"Support"}
          </div>

          <Button
            className={classNames("__wab_instance", sty.button__q8Rnf)}
            color={"navLink"}
            flat={"flat"}
          >
            {"Documentation"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__kjlAy)}
            color={"navLink"}
            flat={"flat"}
          >
            {"FAQs"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__kZxJt)}
            color={"navLink"}
            flat={"flat"}
          >
            {"Status"}
          </Button>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nPqx2)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___45E9I
            )}
          >
            {"Company"}
          </div>

          <Button
            className={classNames("__wab_instance", sty.button__e7MDb)}
            color={"navLink"}
            flat={"flat"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fly7P
              )}
            >
              {"About"}
            </div>
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__sZzCt)}
            color={"navLink"}
            flat={"flat"}
          >
            {"Contact us"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button___62Pov)}
            color={"navLink"}
            flat={"flat"}
          >
            {"Careers"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__lnm13)}
            color={"navLink"}
            flat={"flat"}
          >
            {"Media"}
          </Button>
        </p.Stack>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "logo"],
  logo: ["logo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterSection__ArgProps,
      internalVariantPropNames: PlasmicFooterSection__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicFooterSection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSection";
  } else {
    func.displayName = `PlasmicFooterSection.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSection = Object.assign(
  // Top-level PlasmicFooterSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    // Metadata about props expected for PlasmicFooterSection
    internalVariantProps: PlasmicFooterSection__VariantProps,
    internalArgProps: PlasmicFooterSection__ArgProps
  }
);

export default PlasmicFooterSection;
/* prettier-ignore-end */
